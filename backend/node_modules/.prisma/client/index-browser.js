
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AccountScalarFieldEnum = {
  accCode: 'accCode',
  accName: 'accName',
  accParentCode: 'accParentCode',
  accSublevelFormat: 'accSublevelFormat',
  accType: 'accType',
  accCategory: 'accCategory',
  accIsBank: 'accIsBank',
  accIsActive: 'accIsActive',
  accNotes: 'accNotes',
  accCreatedBy: 'accCreatedBy',
  accCreatedAt: 'accCreatedAt',
  accUpdatedBy: 'accUpdatedBy',
  accUpdatedAt: 'accUpdatedAt'
};

exports.Prisma.AccountBankScalarFieldEnum = {
  abkAccCode: 'abkAccCode',
  abkBankName: 'abkBankName',
  abkBranchName: 'abkBranchName',
  abkAccountNo: 'abkAccountNo',
  abkSheba: 'abkSheba',
  abkCurrency: 'abkCurrency',
  abkIsActive: 'abkIsActive',
  abkIsPos: 'abkIsPos',
  abkIsCheck: 'abkIsCheck',
  abkCreatedBy: 'abkCreatedBy',
  abkCreatedAt: 'abkCreatedAt',
  abkUpdatedBy: 'abkUpdatedBy',
  abkUpdatedAt: 'abkUpdatedAt'
};

exports.Prisma.PersonScalarFieldEnum = {
  perCode: 'perCode',
  perName: 'perName',
  perLastName: 'perLastName',
  perNationalId: 'perNationalId',
  perMobile: 'perMobile',
  perEmail: 'perEmail',
  perTypeSet: 'perTypeSet',
  perAccCode: 'perAccCode',
  perIsActive: 'perIsActive',
  perNotes: 'perNotes',
  perCreatedBy: 'perCreatedBy',
  perCreatedAt: 'perCreatedAt',
  perUpdatedBy: 'perUpdatedBy',
  perUpdatedAt: 'perUpdatedAt'
};

exports.Prisma.UserAccountScalarFieldEnum = {
  usrPerCode: 'usrPerCode',
  usrUsername: 'usrUsername',
  usrPassword: 'usrPassword',
  usrRole: 'usrRole',
  usrIsActive: 'usrIsActive',
  usrLastLogin: 'usrLastLogin',
  usrAvatar: 'usrAvatar',
  usrCreatedBy: 'usrCreatedBy',
  usrCreatedAt: 'usrCreatedAt',
  usrUpdatedBy: 'usrUpdatedBy',
  usrUpdatedAt: 'usrUpdatedAt'
};

exports.Prisma.PersonAccountScalarFieldEnum = {
  pacPersonCode: 'pacPersonCode',
  pacType: 'pacType',
  pacPrjCode: 'pacPrjCode',
  pacAccCode: 'pacAccCode',
  pacCreatedAt: 'pacCreatedAt'
};

exports.Prisma.WalletScalarFieldEnum = {
  wltPerCode: 'wltPerCode',
  wltBalance: 'wltBalance',
  wltLastUpdate: 'wltLastUpdate',
  wltCreatedBy: 'wltCreatedBy',
  wltCreatedAt: 'wltCreatedAt',
  wltUpdatedBy: 'wltUpdatedBy',
  wltUpdatedAt: 'wltUpdatedAt'
};

exports.Prisma.WalletTransactionScalarFieldEnum = {
  wtxId: 'wtxId',
  wtxPerCode: 'wtxPerCode',
  wtxType: 'wtxType',
  wtxAmount: 'wtxAmount',
  wtxDatetime: 'wtxDatetime',
  wtxDesc: 'wtxDesc',
  wtxRefType: 'wtxRefType',
  wtxRefCode: 'wtxRefCode',
  wtxJrnCode: 'wtxJrnCode',
  wtxCreatedBy: 'wtxCreatedBy'
};

exports.Prisma.ProjectScalarFieldEnum = {
  prjCode: 'prjCode',
  prjTitle: 'prjTitle',
  prjLocation: 'prjLocation',
  prjType: 'prjType',
  prjModel: 'prjModel',
  prjStartDate: 'prjStartDate',
  prjEndDate: 'prjEndDate',
  prjNav: 'prjNav',
  prjIsActive: 'prjIsActive',
  prjCreatedBy: 'prjCreatedBy',
  prjCreatedAt: 'prjCreatedAt',
  prjUpdatedBy: 'prjUpdatedBy',
  prjUpdatedAt: 'prjUpdatedAt'
};

exports.Prisma.UnitScalarFieldEnum = {
  untPrjCode: 'untPrjCode',
  untCode: 'untCode',
  untTitle: 'untTitle',
  untType: 'untType',
  untArea: 'untArea',
  untCapacity: 'untCapacity',
  untFloor: 'untFloor',
  untBlock: 'untBlock',
  untIsActive: 'untIsActive',
  untNotes: 'untNotes',
  untCreatedBy: 'untCreatedBy',
  untCreatedAt: 'untCreatedAt',
  untUpdatedBy: 'untUpdatedBy',
  untUpdatedAt: 'untUpdatedAt'
};

exports.Prisma.ReservationScalarFieldEnum = {
  resId: 'resId',
  resPrjCode: 'resPrjCode',
  resUnitCode: 'resUnitCode',
  resPerCode: 'resPerCode',
  resCheckin: 'resCheckin',
  resCheckout: 'resCheckout',
  resGuestCount: 'resGuestCount',
  resTotalPrice: 'resTotalPrice',
  resStatus: 'resStatus',
  resCreatedBy: 'resCreatedBy',
  resCreatedAt: 'resCreatedAt',
  resUpdatedBy: 'resUpdatedBy',
  resUpdatedAt: 'resUpdatedAt'
};

exports.Prisma.ShareholdingScalarFieldEnum = {
  shrId: 'shrId',
  shrPerCode: 'shrPerCode',
  shrPrjCode: 'shrPrjCode',
  shrShares: 'shrShares',
  shrUnitPrice: 'shrUnitPrice',
  shrTotalValue: 'shrTotalValue',
  shrFromDate: 'shrFromDate',
  shrToDate: 'shrToDate',
  shrIsActive: 'shrIsActive',
  shrNotes: 'shrNotes',
  shrCreatedBy: 'shrCreatedBy',
  shrCreatedAt: 'shrCreatedAt',
  shrUpdatedBy: 'shrUpdatedBy',
  shrUpdatedAt: 'shrUpdatedAt'
};

exports.Prisma.ShareTransferScalarFieldEnum = {
  stfId: 'stfId',
  stfPrjCode: 'stfPrjCode',
  stfFromPerson: 'stfFromPerson',
  stfToPerson: 'stfToPerson',
  stfShares: 'stfShares',
  stfUnitPrice: 'stfUnitPrice',
  stfTotalValue: 'stfTotalValue',
  stfTransferDate: 'stfTransferDate',
  stfIsFinalized: 'stfIsFinalized',
  stfDesc: 'stfDesc',
  stfCreatedBy: 'stfCreatedBy',
  stfCreatedAt: 'stfCreatedAt',
  stfUpdatedBy: 'stfUpdatedBy',
  stfUpdatedAt: 'stfUpdatedAt'
};

exports.Prisma.ShareProfitScalarFieldEnum = {
  sptId: 'sptId',
  sptPrjCode: 'sptPrjCode',
  sptPerCode: 'sptPerCode',
  sptYear: 'sptYear',
  sptPeriod: 'sptPeriod',
  sptShares: 'sptShares',
  sptUnitProfit: 'sptUnitProfit',
  sptTotalProfit: 'sptTotalProfit',
  sptIsPaid: 'sptIsPaid',
  sptPaidAt: 'sptPaidAt',
  sptJrnCode: 'sptJrnCode',
  sptCreatedBy: 'sptCreatedBy',
  sptCreatedAt: 'sptCreatedAt',
  sptUpdatedBy: 'sptUpdatedBy',
  sptUpdatedAt: 'sptUpdatedAt'
};

exports.Prisma.JournalScalarFieldEnum = {
  jrnCode: 'jrnCode',
  jrnDate: 'jrnDate',
  jrnDesc: 'jrnDesc',
  jrnType: 'jrnType',
  jrnModule: 'jrnModule',
  jrnRefCode: 'jrnRefCode',
  jrnIsPosted: 'jrnIsPosted',
  jrnCreatedBy: 'jrnCreatedBy',
  jrnCreatedAt: 'jrnCreatedAt',
  jrnUpdatedBy: 'jrnUpdatedBy',
  jrnUpdatedAt: 'jrnUpdatedAt'
};

exports.Prisma.JournalDetailScalarFieldEnum = {
  jrdJrnCode: 'jrdJrnCode',
  jrdLineNo: 'jrdLineNo',
  jrdAccCode: 'jrdAccCode',
  jrdDebit: 'jrdDebit',
  jrdCredit: 'jrdCredit',
  jrdDesc: 'jrdDesc'
};

exports.Prisma.ConfigItemDefScalarFieldEnum = {
  cfgItemKey: 'cfgItemKey',
  cfgTitle: 'cfgTitle',
  cfgTargetType: 'cfgTargetType',
  cfgAccountType: 'cfgAccountType',
  cfgIsRequired: 'cfgIsRequired',
  cfgNotes: 'cfgNotes'
};

exports.Prisma.ConfigValueScalarFieldEnum = {
  cfgItemKey: 'cfgItemKey',
  cfgContextId: 'cfgContextId',
  cfgAccCode: 'cfgAccCode',
  cfgIsActive: 'cfgIsActive',
  cfgCreatedBy: 'cfgCreatedBy',
  cfgCreatedAt: 'cfgCreatedAt'
};

exports.Prisma.UnitTariffScalarFieldEnum = {
  utfPrjCode: 'utfPrjCode',
  utfUnitCode: 'utfUnitCode',
  utfFromDate: 'utfFromDate',
  utfToDate: 'utfToDate',
  utfRowNo: 'utfRowNo',
  utfConditionExpr: 'utfConditionExpr',
  utfBasePrice: 'utfBasePrice',
  utfMaxBaseGuests: 'utfMaxBaseGuests',
  utfMaxBaseNights: 'utfMaxBaseNights',
  utfOnExpireAction: 'utfOnExpireAction',
  utfExpireAmountPerNight: 'utfExpireAmountPerNight',
  utfCreatedBy: 'utfCreatedBy',
  utfCreatedAt: 'utfCreatedAt',
  utfUpdatedBy: 'utfUpdatedBy',
  utfUpdatedAt: 'utfUpdatedAt'
};

exports.Prisma.UnitTariffExtraScalarFieldEnum = {
  utePrjCode: 'utePrjCode',
  uteUnitCode: 'uteUnitCode',
  uteFromDate: 'uteFromDate',
  uteRowNo: 'uteRowNo',
  uteAgeGroup: 'uteAgeGroup',
  uteIsPeak: 'uteIsPeak',
  utePricePerNight: 'utePricePerNight'
};

exports.Prisma.AgeGroupScalarFieldEnum = {
  agpCode: 'agpCode',
  agpTitle: 'agpTitle',
  agpMinAge: 'agpMinAge',
  agpMaxAge: 'agpMaxAge'
};

exports.Prisma.PeakPeriodScalarFieldEnum = {
  pkpLabel: 'pkpLabel',
  pkpTitle: 'pkpTitle',
  pkpFromDate: 'pkpFromDate',
  pkpToDate: 'pkpToDate',
  pkpNotes: 'pkpNotes'
};

exports.Prisma.ReservationUsageScalarFieldEnum = {
  usuPrjCode: 'usuPrjCode',
  usuUnitCode: 'usuUnitCode',
  usuFromDate: 'usuFromDate',
  usuRowNo: 'usuRowNo',
  usuResId: 'usuResId',
  usuConditionExpr: 'usuConditionExpr',
  usuGuestCount: 'usuGuestCount',
  usuNightsUsed: 'usuNightsUsed',
  usuExtraGuests: 'usuExtraGuests',
  usuTotalExtraFee: 'usuTotalExtraFee',
  usuUsageStatus: 'usuUsageStatus',
  usuConvertedAmount: 'usuConvertedAmount',
  usuEvaluatedAt: 'usuEvaluatedAt'
};

exports.Prisma.UserLogScalarFieldEnum = {
  ulgId: 'ulgId',
  ulgPerCode: 'ulgPerCode',
  ulgAction: 'ulgAction',
  ulgTableName: 'ulgTableName',
  ulgRecordKey: 'ulgRecordKey',
  ulgDesc: 'ulgDesc',
  ulgIpAddress: 'ulgIpAddress',
  ulgTimestamp: 'ulgTimestamp'
};

exports.Prisma.ThemeSettingsScalarFieldEnum = {
  thsId: 'thsId',
  thsCategory: 'thsCategory',
  thsKey: 'thsKey',
  thsValue: 'thsValue',
  thsLanguageCode: 'thsLanguageCode',
  thsIsActive: 'thsIsActive',
  thsCreatedBy: 'thsCreatedBy',
  thsCreatedAt: 'thsCreatedAt',
  thsUpdatedBy: 'thsUpdatedBy',
  thsUpdatedAt: 'thsUpdatedAt'
};

exports.Prisma.ThemeLanguagesScalarFieldEnum = {
  thlCode: 'thlCode',
  thlName: 'thlName',
  thlNativeName: 'thlNativeName',
  thlDirection: 'thlDirection',
  thlCalendar: 'thlCalendar',
  thlFontPrimary: 'thlFontPrimary',
  thlFontFallback: 'thlFontFallback',
  thlTranslationFile: 'thlTranslationFile',
  thlDateFormat: 'thlDateFormat',
  thlCurrency: 'thlCurrency',
  thlCurrencySymbol: 'thlCurrencySymbol',
  thlIsActive: 'thlIsActive',
  thlIsDefault: 'thlIsDefault',
  thlCreatedBy: 'thlCreatedBy',
  thlCreatedAt: 'thlCreatedAt',
  thlUpdatedBy: 'thlUpdatedBy',
  thlUpdatedAt: 'thlUpdatedAt'
};

exports.Prisma.ThemeLinksScalarFieldEnum = {
  thlId: 'thlId',
  thlType: 'thlType',
  thlTitle: 'thlTitle',
  thlIcon: 'thlIcon',
  thlImagePath: 'thlImagePath',
  thlUrl: 'thlUrl',
  thlSortOrder: 'thlSortOrder',
  thlIsActive: 'thlIsActive',
  thlCreatedBy: 'thlCreatedBy',
  thlCreatedAt: 'thlCreatedAt',
  thlUpdatedBy: 'thlUpdatedBy',
  thlUpdatedAt: 'thlUpdatedAt'
};

exports.Prisma.ThemeTemplatesScalarFieldEnum = {
  thtId: 'thtId',
  thtName: 'thtName',
  thtDescription: 'thtDescription',
  thtPreviewImage: 'thtPreviewImage',
  thtSettings: 'thtSettings',
  thtIsDefault: 'thtIsDefault',
  thtIsSystem: 'thtIsSystem',
  thtIsActive: 'thtIsActive',
  thtCreatedBy: 'thtCreatedBy',
  thtCreatedAt: 'thtCreatedAt',
  thtUpdatedBy: 'thtUpdatedBy',
  thtUpdatedAt: 'thtUpdatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  Account: 'Account',
  AccountBank: 'AccountBank',
  Person: 'Person',
  UserAccount: 'UserAccount',
  PersonAccount: 'PersonAccount',
  Wallet: 'Wallet',
  WalletTransaction: 'WalletTransaction',
  Project: 'Project',
  Unit: 'Unit',
  Reservation: 'Reservation',
  Shareholding: 'Shareholding',
  ShareTransfer: 'ShareTransfer',
  ShareProfit: 'ShareProfit',
  Journal: 'Journal',
  JournalDetail: 'JournalDetail',
  ConfigItemDef: 'ConfigItemDef',
  ConfigValue: 'ConfigValue',
  UnitTariff: 'UnitTariff',
  UnitTariffExtra: 'UnitTariffExtra',
  AgeGroup: 'AgeGroup',
  PeakPeriod: 'PeakPeriod',
  ReservationUsage: 'ReservationUsage',
  UserLog: 'UserLog',
  ThemeSettings: 'ThemeSettings',
  ThemeLanguages: 'ThemeLanguages',
  ThemeLinks: 'ThemeLinks',
  ThemeTemplates: 'ThemeTemplates'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
